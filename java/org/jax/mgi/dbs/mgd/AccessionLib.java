//  $Header$
//  $Name$

package org.jax.mgi.dbs.mgd;

import java.util.Vector;

import org.jax.mgi.dbs.SchemaConstants;
import org.jax.mgi.dbs.mgd.dao.ACC_AccessionState;
import org.jax.mgi.shr.config.ConfigException;
import org.jax.mgi.shr.dbutils.DBException;
import org.jax.mgi.shr.dbutils.ResultsNavigator;
import org.jax.mgi.shr.dbutils.RowReference;
import org.jax.mgi.shr.dbutils.SQLDataManager;
import org.jax.mgi.shr.dbutils.SQLDataManagerFactory;

/**
 * @is An object that knows how to perform various function pertaining to
 *     accession IDs.
 * @has Nothing
 * @does
 *   <UL>
 *   <LI> Provides methods for handling accession IDs.
 *   </UL>
 * @company The Jackson Laboratory
 * @author dbm
 * @version 1.0
 */

public class AccessionLib
{
    /////////////////
    //  Variables  //
    /////////////////

    // The last number returned by each get() method.
    //
    public static int lastNumericMGI = 0;
    public static int lastNumericJ = 0;

    // constants for preferred bit
    public static final int PREFERRED = 1;
    public static final int NO_PREFERRED = 0;

    /**
     * Get the next available MGI ID.
     * @assumes Nothing
     * @effects Nothing
     * @param None
     * @return The next available MGI ID.
     * @throws ConfigException
     * @throws DBException
     */
    public static String getNextMGIID ()
        throws ConfigException, DBException
    {
        if (lastNumericMGI == 0)
        {
            String sql = "SELECT maxNumericPart " +
                         "FROM ACC_AccessionMax " +
                         "WHERE prefixPart = 'MGI:'";
            SQLDataManager sqlMgr =
                SQLDataManagerFactory.getShared(SchemaConstants.MGD);
            ResultsNavigator rn = sqlMgr.executeQuery(sql);
            rn.next();
            RowReference row = (RowReference)rn.getCurrent();
            lastNumericMGI = row.getInt(1).intValue();
        }
        lastNumericMGI++;

        return new String("MGI:"+lastNumericMGI);
    }


    /**
     * Get the next available J-Number.
     * @assumes Nothing
     * @effects Nothing
     * @param None
     * @return The next available J-Number.
     * @throws ConfigException
     * @throws DBException
     */
    public static String getNextJNum ()
        throws ConfigException, DBException
    {
        if (lastNumericJ == 0)
        {
            String sql = "SELECT maxNumericPart " +
                         "FROM ACC_AccessionMax " +
                         "WHERE prefixPart = 'J:'";
            SQLDataManager sqlMgr =
                SQLDataManagerFactory.getShared(SchemaConstants.MGD);
            ResultsNavigator rn = sqlMgr.executeQuery(sql);
            rn.next();
            RowReference row = (RowReference)rn.getCurrent();
            lastNumericJ = row.getInt(1).intValue();
        }
        lastNumericJ++;

        return new String("J:"+lastNumericJ);
    }


    /**
     * Get an ACC_AccessionState object that contains the next available MGI ID.
     * @assumes Nothing
     * @effects Nothing
     * @param None
     * @return The next available J-Number.
     * @throws ConfigException
     * @throws DBException
     */
    public static ACC_AccessionState getNextAccState ()
        throws ConfigException, DBException
    {
        ACC_AccessionState accState = new ACC_AccessionState();
        accState.setAccID(getNextMGIID());
        return accState;
    }


    /**
     * Update the ACC_AccessionMax table with new max values to account for
     * any accession IDs generated by this class.
     * @assumes Nothing
     * @effects Nothing
     * @param None
     * @return Nothing
     * @throws ConfigException
     * @throws DBException
     */
    public static void commitAccessionMax ()
        throws ConfigException, DBException
    {
        if (lastNumericMGI != 0)
        {
            String sql = "UPDATE ACC_AccessionMax " +
                         "SET maxNumericPart = " + lastNumericMGI + " " +
                         "WHERE prefixPart = 'MGI:'";
            SQLDataManager sqlMgr =
                SQLDataManagerFactory.getShared(SchemaConstants.MGD);
            sqlMgr.executeUpdate(sql);
            lastNumericMGI = 0;
        }

        if (lastNumericJ != 0)
        {
            String sql = "UPDATE ACC_AccessionMax " +
                         "SET maxNumericPart = " + lastNumericJ + " " +
                         "WHERE prefixPart = 'J:'";
            SQLDataManager sqlMgr =
                SQLDataManagerFactory.getShared(SchemaConstants.MGD);
            sqlMgr.executeUpdate(sql);
            lastNumericJ = 0;
        }
    }


    /**
     * Split an accession ID into its prefix and numeric parts.
     * @assumes Nothing
     * @effects Nothing
     * @param accID The accession ID to be split
     * @return A vector containing the prefix part (String) and numeric
     *         part (Integer) of the accession ID.
     * @throws Nothing
     */
    public static Vector splitAccID (String accID)
    {
        String prefixPart = null;
        Integer numericPart = null;
        Vector v = new Vector();

        // Return null prefix and numeric parts if the accession ID is
        // null or blank.
        //
        if (accID == null || accID.length() == 0)
        {
            v.add(prefixPart);
            v.add(numericPart);
            return v;
        }

        // Determine if the accession ID contains any characters prior to a
        // series of digits that ends the string.
        //
        String[] parts = accID.split("\\d*$");

        // If there is a prefix part, save it and set the numeric part to
        // be any remaining characters.  Otherwise, the entire accession ID
        // is the numeric part.
        //
        if (parts.length > 0)
        {
            prefixPart = parts[0];
            if (accID.length() > prefixPart.length())
                numericPart = Integer.valueOf(accID.substring(prefixPart.length()));

        }
        else
            numericPart = Integer.valueOf(accID);

        // Add the prefix and numeric parts to the vector and return it.
        //
        v.add(prefixPart);
        v.add(numericPart);
        return v;
    }
}


//  $Log$
//  Revision 1.1.2.1  2003/11/13 20:36:57  sc
//  PREFERRED, NOT_PREFERRED constans
//
//  Revision 1.1  2003/10/21 13:25:45  dbm
//  Initial version
//
//
/**************************************************************************
*
* Warranty Disclaimer and Copyright Notice
*
*  THE JACKSON LABORATORY MAKES NO REPRESENTATION ABOUT THE SUITABILITY OR
*  ACCURACY OF THIS SOFTWARE OR DATA FOR ANY PURPOSE, AND MAKES NO WARRANTIES,
*  EITHER EXPRESS OR IMPLIED, INCLUDING MERCHANTABILITY AND FITNESS FOR A
*  PARTICULAR PURPOSE OR THAT THE USE OF THIS SOFTWARE OR DATA WILL NOT
*  INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS, OR OTHER RIGHTS.
*  THE SOFTWARE AND DATA ARE PROVIDED "AS IS".
*
*  This software and data are provided to enhance knowledge and encourage
*  progress in the scientific community and are to be used only for research
*  and educational purposes.  Any reproduction or use for commercial purpose
*  is prohibited without the prior express written permission of The Jackson
*  Laboratory.
*
* Copyright \251 1996, 1999, 2002, 2003 by The Jackson Laboratory
*
* All Rights Reserved
*
**************************************************************************/
