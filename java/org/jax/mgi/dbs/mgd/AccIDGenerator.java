//  $Header$
//  $Name$

package org.jax.mgi.dbs.mgd;

import org.jax.mgi.dbs.mgd.dao.AccessionState;
import org.jax.mgi.shr.config.ConfigException;
import org.jax.mgi.shr.dbutils.DBException;
import org.jax.mgi.shr.dbutils.ResultsNavigator;
import org.jax.mgi.shr.dbutils.RowReference;
import org.jax.mgi.shr.dbutils.SQLDataManager;
import org.jax.mgi.shr.dbutils.SQLDataManagerFactory;

/**
 * @is An object that knows how to generate the next available accession ID
 *     using the ACC_AccessionMax table.
 * @has
 *   <UL>
 *   <LI> A variable to hold the last number returned for each type of
 *        accession ID (MGI ID or J-Number).
 *   </UL>
 * @does
 *   <UL>
 *   <LI> Provides methods to get the next MGI ID or J-Number.
 *   <LI> Provides a method to get an AccessionState object that contains the
 *        next MGI ID.
 *   <LI> Provides a "close" method to update the ACC_AccessionMax table if any
 *        new accession IDs have been generated.
 *   </UL>
 * @company The Jackson Laboratory
 * @author dbm
 * @version 1.0
 */

public class AccIDGenerator
{
    /////////////////
    //  Variables  //
    /////////////////

    // The last number returned by each get() method.
    //
    public static int lastNumericMGI = 0;
    public static int lastNumericJ = 0;


    /**
     * Get the next available MGI ID.
     * @assumes Nothing
     * @effects Nothing
     * @param None
     * @return The next available MGI ID.
     * @throws Nothing
     */
    public static String getNextMGIID ()
        throws ConfigException, DBException
    {
        if (lastNumericMGI == 0)
        {
            String sql = "SELECT maxNumericPart " +
                         "FROM ACC_AccessionMax " +
                         "WHERE prefixPart = 'MGI:'";
            SQLDataManager sqlMgr =
                SQLDataManagerFactory.getShared(SQLDataManagerFactory.MGD);
            ResultsNavigator rn = sqlMgr.executeQuery(sql);
            rn.next();
            RowReference row = (RowReference)rn.getCurrent();
            lastNumericMGI = row.getInt(1);
        }
        lastNumericMGI++;

        return new String("MGI:"+lastNumericMGI);
    }


    /**
     * Get the next available J-Number.
     * @assumes Nothing
     * @effects Nothing
     * @param None
     * @return The next available J-Number.
     * @throws Nothing
     */
    public static String getNextJNum ()
        throws ConfigException, DBException
    {
        if (lastNumericJ == 0)
        {
            String sql = "SELECT maxNumericPart " +
                         "FROM ACC_AccessionMax " +
                         "WHERE prefixPart = 'J:'";
            SQLDataManager sqlMgr =
                SQLDataManagerFactory.getShared(SQLDataManagerFactory.MGD);
            ResultsNavigator rn = sqlMgr.executeQuery(sql);
            rn.next();
            RowReference row = (RowReference)rn.getCurrent();
            lastNumericJ = row.getInt(1);
        }
        lastNumericJ++;

        return new String("J:"+lastNumericJ);
    }


    /**
     * Get an AccessionState object that contains the next available MGI ID.
     * @assumes Nothing
     * @effects Nothing
     * @param None
     * @return The next available J-Number.
     * @throws Nothing
     */
    public static AccessionState getNextAccState ()
        throws ConfigException, DBException
    {
        AccessionState accState = new AccessionState();
        accState.setAccID(getNextMGIID());
        return accState;
    }


    /**
     * Update the ACC_AccessionMax table with new max values to account for
     * any accession IDs generated by this class.
     * @assumes Nothing
     * @effects Nothing
     * @param None
     * @return Nothing
     * @throws Nothing
     */
    public static void close ()
        throws ConfigException, DBException
    {
        if (lastNumericMGI != 0)
        {
            String sql = "UPDATE ACC_AccessionMax " +
                         "SET maxNumericPart = " + lastNumericMGI + " " +
                         "WHERE prefixPart = 'MGI:'";
            SQLDataManager sqlMgr =
                SQLDataManagerFactory.getShared(SQLDataManagerFactory.MGD);
            sqlMgr.executeUpdate(sql);
            lastNumericMGI = 0;
        }

        if (lastNumericJ != 0)
        {
            String sql = "UPDATE ACC_AccessionMax " +
                         "SET maxNumericPart = " + lastNumericJ + " " +
                         "WHERE prefixPart = 'J:'";
            SQLDataManager sqlMgr =
                SQLDataManagerFactory.getShared(SQLDataManagerFactory.MGD);
            sqlMgr.executeUpdate(sql);
            lastNumericJ = 0;
        }
    }
}


//  $Log$
//  Revision 1.1  2003/09/19 17:49:37  dbm
//  Initial version
//
//
/**************************************************************************
*
* Warranty Disclaimer and Copyright Notice
*
*  THE JACKSON LABORATORY MAKES NO REPRESENTATION ABOUT THE SUITABILITY OR
*  ACCURACY OF THIS SOFTWARE OR DATA FOR ANY PURPOSE, AND MAKES NO WARRANTIES,
*  EITHER EXPRESS OR IMPLIED, INCLUDING MERCHANTABILITY AND FITNESS FOR A
*  PARTICULAR PURPOSE OR THAT THE USE OF THIS SOFTWARE OR DATA WILL NOT
*  INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS, OR OTHER RIGHTS.
*  THE SOFTWARE AND DATA ARE PROVIDED "AS IS".
*
*  This software and data are provided to enhance knowledge and encourage
*  progress in the scientific community and are to be used only for research
*  and educational purposes.  Any reproduction or use for commercial purpose
*  is prohibited without the prior express written permission of The Jackson
*  Laboratory.
*
* Copyright \251 1996, 1999, 2002, 2003 by The Jackson Laboratory
*
* All Rights Reserved
*
**************************************************************************/
